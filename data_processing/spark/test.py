import pandas as pd
import numpy as np
import re
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.impute import KNNImputer
from sklearn.cluster import KMeans
from sklearn.feature_extraction.text import TfidfVectorizer
import warnings

warnings.filterwarnings("ignore")

# ----- B∆∞·ªõc 1: ƒê·ªçc d·ªØ li·ªáu g·ªëc -----
print("üìä ƒêang ƒë·ªçc d·ªØ li·ªáu...")
df = pd.read_csv("raw_house.csv")

# ----- B∆∞·ªõc 2: B·ªè c·ªôt kh√¥ng c·∫ßn thi·∫øt -----
print("üßπ ƒêang l√†m s·∫°ch d·ªØ li·ªáu...")
df.drop(
    [
        "short_description",
        "url",
        "crawl_timestamp",
        "timestamp",
        "source",
        "title",
        "description",
    ],
    axis=1,
    inplace=True,
    errors="ignore",
)


# ----- B∆∞·ªõc 3: S·ª≠a nh·∫ßm gi·ªØa price v√† price_per_m2 -----
def correct_price_swap(row):
    price, ppm2 = str(row["price"]), str(row["price_per_m2"])
    if "/m¬≤" in price or "/m2" in price:
        if "t·ª∑" in ppm2 or "tri·ªáu" in ppm2:
            return ppm2, price
    return price, ppm2


df[["price", "price_per_m2"]] = df.apply(
    correct_price_swap, axis=1, result_type="expand"
)


# ----- B∆∞·ªõc 4: H√†m chu·∫©n h√≥a ƒë∆°n gi√° -----
def parse_price(text):
    if pd.isna(text):
        return np.nan
    text = text.lower().replace(",", ".")
    nums = re.findall(r"\d+\.\d+|\d+", text)
    if not nums:
        return np.nan
    value = float(nums[0])
    if "t·ª∑" in text:
        return value * 1_000_000_000
    elif "tri·ªáu" in text:
        return value * 1_000_000
    return np.nan


# ----- B∆∞·ªõc 5: H√†m chu·∫©n h√≥a di·ªán t√≠ch -----
def parse_area(text):
    if pd.isna(text):
        return np.nan
    text = str(text).replace(",", ".")
    nums = re.findall(r"\d+\.\d+|\d+", text)
    return float(nums[0]) if nums else np.nan


# ----- B∆∞·ªõc 6: ∆Ø·ªõc l∆∞·ª£ng gi√° n·∫øu l√† "th·ªèa thu·∫≠n" -----
def estimate_price(row):
    text = str(row["price"]).lower()
    if any(
        kw in text for kw in ["th·ªèa thu·∫≠n", "tho·∫£ thu·∫≠n", "li√™n h·ªá", "ƒëang c·∫≠p nh·∫≠t"]
    ):
        # Ki·ªÉm tra xem c√≥ ƒë·ªß th√¥ng tin kh√¥ng
        ppm2 = parse_price(row["price_per_m2"])
        area = parse_area(row["area"])

        # N·∫øu thi·∫øu m·ªôt trong hai th√¥ng tin th√¨ b·ªè qua
        if pd.isna(ppm2) or pd.isna(area):
            return np.nan

        # Ki·ªÉm tra ƒë∆°n v·ªã c·ªßa price_per_m2
        ppm2_text = str(row["price_per_m2"]).lower()
        if "t·ª∑/m¬≤" in ppm2_text or "ty/m¬≤" in ppm2_text:
            return ppm2 * 1_000_000_000 * area
        elif "tri·ªáu/m¬≤" in ppm2_text:
            return ppm2 * 1_000_000 * area
        else:
            return np.nan
    else:
        return parse_price(row["price"])


df["price_vnd"] = df.apply(estimate_price, axis=1)
df["price_per_m2_vnd"] = df["price_per_m2"].apply(parse_price)
df["area_m2"] = df["area"].apply(parse_area)

# B·ªè c√°c h√†ng kh√¥ng c√≥ gi√° ho·∫∑c gi√° kh√¥ng h·ª£p l·ªá
df = df[df["price_vnd"].notna() & (df["price_vnd"] > 0)]
df.drop(["price", "price_per_m2", "area"], axis=1, inplace=True)

# In th√¥ng tin v·ªÅ gi√° sau khi x·ª≠ l√Ω
print("\nTh√¥ng tin v·ªÅ gi√° sau khi x·ª≠ l√Ω:")
print(f"S·ªë l∆∞·ª£ng b·∫£n ghi c√≤n l·∫°i: {len(df)}")
print("\nTh·ªëng k√™ gi√°:")
print(df["price_vnd"].describe())
print("\nTh·ªëng k√™ gi√°/m2:")
print(df["price_per_m2_vnd"].describe())


# ----- B∆∞·ªõc 7: T√°ch t·ªça ƒë·ªô -----
def split_coords(coord):
    try:
        lat, lon = map(float, coord.split(","))
        return lat, lon
    except:
        return np.nan, np.nan


df[["latitude", "longitude"]] = df["coordinates"].apply(
    lambda x: pd.Series(split_coords(x))
)
df.drop("coordinates", axis=1, inplace=True)


# ----- B∆∞·ªõc 8: Tr√≠ch s·ªë t·ª´ chu·ªói -----
def extract_number(text):
    if pd.isna(text):
        return np.nan
    nums = re.findall(r"\d+", str(text))
    return int(nums[0]) if nums else np.nan


for col in ["bedroom", "bathroom", "floor_count", "facade_width", "road_width"]:
    df[col] = df[col].apply(extract_number)

# ----- B∆∞·ªõc 9: M√£ h√≥a bi·∫øn ph√¢n lo·∫°i -----
print("üî§ ƒêang m√£ h√≥a bi·∫øn ph√¢n lo·∫°i...")

# B·ªè c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt
columns_to_drop = ["house_direction", "balcony_direction", "legal_status", "interior"]
df.drop(columns=columns_to_drop, inplace=True)

# ----- B∆∞·ªõc 10: Feature Engineering -----
print("üîß ƒêang t·∫°o c√°c bi·∫øn m·ªõi...")

# 1. T√≠nh to√°n c√°c ch·ªâ s·ªë t∆∞∆°ng ƒë·ªëi
df["price_per_m2_ratio"] = df["price_per_m2_vnd"] / df["price_per_m2_vnd"].mean()
df["area_ratio"] = df["area_m2"] / df["area_m2"].mean()

# 2. T·∫°o c√°c bi·∫øn t∆∞∆°ng t√°c
df["area_per_room"] = df["area_m2"] / df["bedroom"].replace(0, np.nan)
df["comfort_index"] = (
    df["bedroom"].fillna(0) + df["bathroom"].fillna(0) + df["floor_count"].fillna(0)
)

# 3. T√≠nh to√°n c√°c t·ª∑ l·ªá di·ªán t√≠ch
df["facade_area_ratio"] = df["facade_width"] / df["area_m2"]  # T·ª∑ l·ªá m·∫∑t ti·ªÅn/di·ªán t√≠ch
df["road_facade_ratio"] = df["road_width"] / df["facade_width"]  # T·ª∑ l·ªá ƒë∆∞·ªùng/m·∫∑t ti·ªÅn


# 4. T√≠nh kho·∫£ng c√°ch ƒë·∫øn trung t√¢m
def calculate_distance_to_center(lat, lon):
    center_lat, center_lon = 10.762622, 106.660172  # T·ªça ƒë·ªô trung t√¢m HCM
    return np.sqrt((lat - center_lat) * 2 + (lon - center_lon) * 2)


df["distance_to_center"] = df.apply(
    lambda x: calculate_distance_to_center(x["latitude"], x["longitude"]), axis=1
)

# 5. Ph√¢n c·ª•m khu v·ª±c
print("üó∫Ô∏è ƒêang ph√¢n c·ª•m khu v·ª±c...")
# T·∫°o m·ªôt Series m·ªõi v·ªõi c√πng index nh∆∞ df
df["location_cluster"] = -1  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

# Ch·ªâ ph√¢n c·ª•m cho c√°c b·∫£n ghi c√≥ t·ªça ƒë·ªô h·ª£p l·ªá
valid_coords = df[["latitude", "longitude"]].dropna()
if len(valid_coords) > 0:
    kmeans = KMeans(n_clusters=10, random_state=42)
    clusters = kmeans.fit_predict(valid_coords)
    # C·∫≠p nh·∫≠t l·∫°i c√°c gi√° tr·ªã cluster cho c√°c b·∫£n ghi c√≥ t·ªça ƒë·ªô h·ª£p l·ªá
    df.loc[valid_coords.index, "location_cluster"] = clusters

# ----- B∆∞·ªõc 11: X·ª≠ l√Ω ngo·∫°i lai -----
print("üîç ƒêang x·ª≠ l√Ω ngo·∫°i lai...")


def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    return df[~((df[column] < (Q1 - 1.5 * IQR)) | (df[column] > (Q3 + 1.5 * IQR)))]


numeric_cols = ["price_vnd", "area_m2", "price_per_m2_vnd", "distance_to_center"]
for col in numeric_cols:
    df = remove_outliers(df, col)

# ----- B∆∞·ªõc 12: X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu -----
print("üîÑ ƒêang x·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu...")
imputer = KNNImputer(n_neighbors=5)
df[numeric_cols] = imputer.fit_transform(df[numeric_cols])

# T√°ch c√°c bi·∫øn c·∫ßn gi·ªØ nguy√™n gi√° tr·ªã g·ªëc
original_cols = ["price_vnd", "price_per_m2_vnd", "area_m2", "latitude", "longitude"]
derived_cols = [col for col in numeric_cols if col not in original_cols]

# ----- B∆∞·ªõc 13: Chu·∫©n h√≥a d·ªØ li·ªáu -----
print("üìè ƒêang chu·∫©n h√≥a d·ªØ li·ªáu...")
scaler = StandardScaler()
# Ch·ªâ chu·∫©n h√≥a c√°c bi·∫øn ph·ª• tr·ª£
df[derived_cols] = scaler.fit_transform(df[derived_cols])

# L∆∞u c√°c th√¥ng s·ªë chu·∫©n h√≥a
scaler_params = {"mean": scaler.mean_, "scale": scaler.scale_}
np.save("scaler_params.npy", scaler_params)

# ----- B∆∞·ªõc 14: L∆∞u k·∫øt qu·∫£ -----
print("üíæ ƒêang l∆∞u k·∫øt qu·∫£...")
df.to_csv("clean_train_data.csv", index=False)
print("‚úÖ D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω xong v√† l∆∞u t·∫°i: clean_train_data.csv")

# ----- B∆∞·ªõc 15: In th√¥ng tin v·ªÅ d·ªØ li·ªáu -----
print("\nüìä Th√¥ng tin v·ªÅ d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω:")
print(f"S·ªë l∆∞·ª£ng b·∫£n ghi: {len(df)}")
print(f"S·ªë l∆∞·ª£ng c·ªôt: {len(df.columns)}")
print("\nC√°c c·ªôt trong d·ªØ li·ªáu:")
for col in df.columns:
    print(f"- {col}")

# In ra m·ªôt s·ªë v√≠ d·ª• v·ªÅ gi√° tr·ªã
print("\nV√≠ d·ª• v·ªÅ gi√° tr·ªã:")
print("\nC√°c bi·∫øn g·ªëc:")
for col in original_cols:
    print(f"\n{col}:")
    print(df[col].head())

print("\nC√°c bi·∫øn ƒë√£ chu·∫©n h√≥a:")
for col in derived_cols:
    print(f"\n{col}:")
    print(df[col].head())
