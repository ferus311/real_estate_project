#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Model Registry ƒë·ªÉ qu·∫£n l√Ω model versioning v√† metadata
"""

import os
import json
import shutil
from datetime import datetime
from typing import Dict, Any, List, Optional, Tuple
import logging
from pathlib import Path
import pickle

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class ModelRegistry:
    """
    Registry ƒë·ªÉ qu·∫£n l√Ω c√°c versions c·ªßa models
    """

    def __init__(
        self, registry_path: str = "/home/fer/data/real_estate_project/models"
    ):
        self.registry_path = Path(registry_path)
        self.registry_path.mkdir(parents=True, exist_ok=True)

        # Metadata file
        self.metadata_file = self.registry_path / "registry_metadata.json"
        self.load_metadata()

    def load_metadata(self):
        """Load registry metadata"""
        if self.metadata_file.exists():
            with open(self.metadata_file, "r") as f:
                self.metadata = json.load(f)
        else:
            self.metadata = {
                "models": {},
                "created_at": datetime.now().isoformat(),
                "last_updated": datetime.now().isoformat(),
            }

    def save_metadata(self):
        """Save registry metadata"""
        self.metadata["last_updated"] = datetime.now().isoformat()
        with open(self.metadata_file, "w") as f:
            json.dump(self.metadata, f, indent=2)

    def register_model(
        self,
        model_name: str,
        model_path: str,
        model_type: str,
        metrics: Dict[str, float],
        hyperparameters: Dict[str, Any],
        training_data_info: Dict[str, Any],
        feature_columns: List[str],
        tags: Optional[List[str]] = None,
        description: Optional[str] = None,
    ) -> str:
        """
        ƒêƒÉng k√Ω m·ªôt model version m·ªõi

        Args:
            model_name: T√™n model
            model_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn model ƒë√£ train
            model_type: Lo·∫°i model (price_prediction, etc.)
            metrics: Dict metrics ƒë√°nh gi√°
            hyperparameters: Dict hyperparameters
            training_data_info: Th√¥ng tin v·ªÅ d·ªØ li·ªáu training
            feature_columns: Danh s√°ch feature columns
            tags: Tags ƒë·ªÉ ph√¢n lo·∫°i model
            description: M√¥ t·∫£ model

        Returns:
            str: Version ID c·ªßa model ƒë√£ ƒëƒÉng k√Ω
        """
        current_time = datetime.now()
        version_id = f"{model_name}_v{current_time.strftime('%Y%m%d_%H%M%S')}"

        # T·∫°o th∆∞ m·ª•c cho model version
        version_path = self.registry_path / model_name / version_id
        version_path.mkdir(parents=True, exist_ok=True)

        # Copy model files
        if os.path.exists(model_path):
            dest_model_path = version_path / "model"
            if os.path.isdir(model_path):
                shutil.copytree(model_path, dest_model_path, dirs_exist_ok=True)
            else:
                shutil.copy2(model_path, dest_model_path)

        # T·∫°o model metadata
        model_metadata = {
            "model_name": model_name,
            "version_id": version_id,
            "model_type": model_type,
            "created_at": current_time.isoformat(),
            "metrics": metrics,
            "hyperparameters": hyperparameters,
            "training_data_info": training_data_info,
            "feature_columns": feature_columns,
            "tags": tags or [],
            "description": description or "",
            "model_path": str(dest_model_path),
            "status": "registered",
        }

        # Save model metadata
        metadata_path = version_path / "metadata.json"
        with open(metadata_path, "w") as f:
            json.dump(model_metadata, f, indent=2)

        # Update registry metadata
        if model_name not in self.metadata["models"]:
            self.metadata["models"][model_name] = {
                "versions": [],
                "latest_version": None,
                "production_version": None,
            }

        self.metadata["models"][model_name]["versions"].append(
            {
                "version_id": version_id,
                "created_at": current_time.isoformat(),
                "metrics": metrics,
                "status": "registered",
            }
        )

        # Set as latest version
        self.metadata["models"][model_name]["latest_version"] = version_id

        self.save_metadata()

        logger.info(f"‚úÖ Model registered: {version_id}")
        logger.info(f"üìç Path: {version_path}")
        logger.info(f"üìä Metrics: {metrics}")

        return version_id

    def promote_to_production(self, model_name: str, version_id: str) -> bool:
        """
        Promote m·ªôt model version l√™n production

        Args:
            model_name: T√™n model
            version_id: Version ID

        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        if model_name not in self.metadata["models"]:
            logger.error(f"Model {model_name} not found")
            return False

        # Ki·ªÉm tra version exists
        versions = [
            v["version_id"] for v in self.metadata["models"][model_name]["versions"]
        ]
        if version_id not in versions:
            logger.error(f"Version {version_id} not found for model {model_name}")
            return False

        # Update production version
        old_production = self.metadata["models"][model_name].get("production_version")
        self.metadata["models"][model_name]["production_version"] = version_id

        # Update version status
        for version in self.metadata["models"][model_name]["versions"]:
            if version["version_id"] == version_id:
                version["status"] = "production"
                version["promoted_at"] = datetime.now().isoformat()
            elif version.get("status") == "production":
                version["status"] = "registered"

        self.save_metadata()

        logger.info(f"‚úÖ Model {version_id} promoted to production")
        if old_production:
            logger.info(f"üìâ Previous production version: {old_production}")

        return True

    def get_model_info(
        self, model_name: str, version_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        L·∫•y th√¥ng tin model

        Args:
            model_name: T√™n model
            version_id: Version ID (n·∫øu None th√¨ l·∫•y latest)

        Returns:
            Dict th√¥ng tin model
        """
        if model_name not in self.metadata["models"]:
            raise ValueError(f"Model {model_name} not found")

        if version_id is None:
            version_id = self.metadata["models"][model_name]["latest_version"]

        version_path = self.registry_path / model_name / version_id / "metadata.json"
        if not version_path.exists():
            raise ValueError(f"Version {version_id} metadata not found")

        with open(version_path, "r") as f:
            return json.load(f)

    def get_production_model(self, model_name: str) -> Optional[Dict[str, Any]]:
        """
        L·∫•y th√¥ng tin production model

        Args:
            model_name: T√™n model

        Returns:
            Dict th√¥ng tin production model ho·∫∑c None
        """
        if model_name not in self.metadata["models"]:
            return None

        production_version = self.metadata["models"][model_name].get(
            "production_version"
        )
        if not production_version:
            return None

        return self.get_model_info(model_name, production_version)

    def list_models(self) -> Dict[str, Any]:
        """
        Li·ªát k√™ t·∫•t c·∫£ models

        Returns:
            Dict th√¥ng tin t·∫•t c·∫£ models
        """
        return self.metadata["models"]

    def list_model_versions(self, model_name: str) -> List[Dict[str, Any]]:
        """
        Li·ªát k√™ t·∫•t c·∫£ versions c·ªßa m·ªôt model

        Args:
            model_name: T√™n model

        Returns:
            List versions
        """
        if model_name not in self.metadata["models"]:
            return []

        return self.metadata["models"][model_name]["versions"]

    def compare_models(
        self, model_name: str, version_ids: List[str], metric: str = "rmse"
    ) -> Dict[str, Any]:
        """
        So s√°nh c√°c model versions

        Args:
            model_name: T√™n model
            version_ids: Danh s√°ch version IDs
            metric: Metric ƒë·ªÉ so s√°nh

        Returns:
            Dict k·∫øt qu·∫£ so s√°nh
        """
        comparison = {
            "metric": metric,
            "models": [],
            "best_version": None,
            "best_value": None,
        }

        for version_id in version_ids:
            try:
                model_info = self.get_model_info(model_name, version_id)
                metric_value = model_info["metrics"].get(metric)

                comparison["models"].append(
                    {
                        "version_id": version_id,
                        "metric_value": metric_value,
                        "created_at": model_info["created_at"],
                        "status": model_info["status"],
                    }
                )

                # Determine best (assuming lower is better for RMSE, MAE)
                if metric_value is not None:
                    if (
                        comparison["best_value"] is None
                        or metric_value < comparison["best_value"]
                    ):
                        comparison["best_version"] = version_id
                        comparison["best_value"] = metric_value

            except Exception as e:
                logger.warning(f"Could not get info for {version_id}: {str(e)}")

        return comparison

    def archive_model(self, model_name: str, version_id: str) -> bool:
        """
        Archive m·ªôt model version

        Args:
            model_name: T√™n model
            version_id: Version ID

        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        try:
            # Update status in metadata
            for version in self.metadata["models"][model_name]["versions"]:
                if version["version_id"] == version_id:
                    version["status"] = "archived"
                    version["archived_at"] = datetime.now().isoformat()
                    break

            self.save_metadata()
            logger.info(f"‚úÖ Model {version_id} archived")
            return True

        except Exception as e:
            logger.error(f"Failed to archive model {version_id}: {str(e)}")
            return False

    def cleanup_old_versions(self, model_name: str, keep_latest: int = 5) -> int:
        """
        Cleanup old model versions, ch·ªâ gi·ªØ l·∫°i N versions m·ªõi nh·∫•t

        Args:
            model_name: T√™n model
            keep_latest: S·ªë versions m·ªõi nh·∫•t c·∫ßn gi·ªØ

        Returns:
            int: S·ªë versions ƒë√£ x√≥a
        """
        if model_name not in self.metadata["models"]:
            return 0

        versions = self.metadata["models"][model_name]["versions"]

        # Sort by created_at (newest first)
        versions.sort(key=lambda x: x["created_at"], reverse=True)

        # Get production version to protect it
        production_version = self.metadata["models"][model_name].get(
            "production_version"
        )

        deleted_count = 0
        for i, version in enumerate(versions):
            # Keep latest N versions and production version
            if i >= keep_latest and version["version_id"] != production_version:
                version_path = self.registry_path / model_name / version["version_id"]
                if version_path.exists():
                    shutil.rmtree(version_path)
                    deleted_count += 1
                    logger.info(f"üóëÔ∏è Deleted old version: {version['version_id']}")

        # Update metadata (remove deleted versions)
        self.metadata["models"][model_name]["versions"] = [
            v
            for i, v in enumerate(versions)
            if i < keep_latest or v["version_id"] == production_version
        ]

        self.save_metadata()

        return deleted_count


def main():
    """Test function"""
    registry = ModelRegistry()

    # Example usage
    print("Available models:", registry.list_models())


if __name__ == "__main__":
    main()
