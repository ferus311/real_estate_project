/**
 * V√≠ d·ª• s·ª≠ d·ª•ng c√°c h√†m ti·ªán √≠ch ƒë·ªãa ch·ªâ (Address Utility Functions)
 *
 * C√°c h√†m n√†y gi√∫p t·ª± ƒë·ªông t·∫°o tr∆∞·ªùng address t·ª´ c√°c tr∆∞·ªùng street, ward, district, province
 * c·ªßa interface Property.
 */

import { Property, getPropertyAddress, getPropertyShortAddress, addAddressToProperty } from '../services/api';

// V√≠ d·ª• d·ªØ li·ªáu Property
const exampleProperty: Property = {
  id: '1',
  title: 'Nh√† ph·ªë 3 t·∫ßng',
  price: 3500000000,
  area: 120,
  price_per_m2: 29166667,
  province: 'H·ªì Ch√≠ Minh',
  district: 'Qu·∫≠n 1',
  ward: 'Ph∆∞·ªùng B·∫øn Ngh√©',
  street: '123 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá',
  latitude: 10.777229,
  longitude: 106.704556,
  bedroom: 3,
  bathroom: 2,
  floor_count: 3,
  house_type: 'Nh√† ph·ªë',
  house_direction: 'ƒê√¥ng',
  legal_status: 'S·ªï h·ªìng',
  interior: 'ƒê·∫ßy ƒë·ªß',
  source: 'batdongsan.com.vn',
  url: 'https://example.com/property/1',
  price_formatted: '3.5 t·ª∑ VND',
};

// V√≠ d·ª• s·ª≠ d·ª•ng c√°c h√†m

console.log('=== V√ç D·ª§ S·ª¨ D·ª§NG C√ÅC H√ÄM TI·ªÜN √çCH ƒê·ªäA CH·ªà ===');

// 1. T·∫°o ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
const fullAddress = getPropertyAddress(exampleProperty);
console.log('ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß:', fullAddress);
// Output: "123 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, H·ªì Ch√≠ Minh"

// 2. T·∫°o ƒë·ªãa ch·ªâ ng·∫Øn g·ªçn (kh√¥ng c√≥ ƒë∆∞·ªùng/ph·ªë)
const shortAddress = getPropertyShortAddress(exampleProperty);
console.log('ƒê·ªãa ch·ªâ ng·∫Øn g·ªçn:', shortAddress);
// Output: "Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, H·ªì Ch√≠ Minh"

// 3. Chuy·ªÉn ƒë·ªïi Property th√†nh PropertyWithAddress
const propertyWithAddress = addAddressToProperty(exampleProperty);
console.log('Property v·ªõi address:', propertyWithAddress);
// Output: { ...exampleProperty, address: "123 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, H·ªì Ch√≠ Minh", shortAddress: "Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, H·ªì Ch√≠ Minh" }

// 4. X·ª≠ l√Ω tr∆∞·ªùng h·ª£p thi·∫øu d·ªØ li·ªáu
const incompleteProperty: Property = {
  id: '2',
  title: 'CƒÉn h·ªô chung c∆∞',
  price: 2000000000,
  area: 80,
  price_per_m2: 25000000,
  province: 'H√† N·ªôi',
  district: 'Qu·∫≠n C·∫ßu Gi·∫•y',
  ward: '', // Thi·∫øu ward
  street: '', // Thi·∫øu street
  latitude: 21.028511,
  longitude: 105.804817,
  bedroom: 2,
  bathroom: 1,
  floor_count: 1,
  house_type: 'Chung c∆∞',
  house_direction: 'Nam',
  legal_status: 'S·ªï h·ªìng',
  interior: 'C∆° b·∫£n',
  source: 'chotot.com',
  url: 'https://example.com/property/2',
  price_formatted: '2 t·ª∑ VND',
};

const incompleteAddress = getPropertyAddress(incompleteProperty);
console.log('ƒê·ªãa ch·ªâ thi·∫øu d·ªØ li·ªáu:', incompleteAddress);
// Output: "Qu·∫≠n C·∫ßu Gi·∫•y, H√† N·ªôi" (t·ª± ƒë·ªông b·ªè qua c√°c tr∆∞·ªùng tr·ªëng)

console.log('=== K·∫æT TH√öC V√ç D·ª§ ===');

/**
 * C√ÅCH S·ª¨ D·ª§NG TRONG COMPONENT REACT:
 *
 * import { getPropertyAddress, getPropertyShortAddress } from '../services/api';
 *
 * function PropertyCard({ property }: { property: Property }) {
 *   return (
 *     <div>
 *       <h3>{property.title}</h3>
 *       <p>üìç {getPropertyAddress(property)}</p>
 *       <p>üí∞ {property.price_formatted}</p>
 *     </div>
 *   );
 * }
 *
 * // Ho·∫∑c s·ª≠ d·ª•ng PropertyWithAddress
 * function PropertyList({ properties }: { properties: Property[] }) {
 *   const propertiesWithAddress = properties.map(addAddressToProperty);
 *
 *   return (
 *     <div>
 *       {propertiesWithAddress.map(property => (
 *         <div key={property.id}>
 *           <h3>{property.title}</h3>
 *           <p>üìç {property.address}</p>
 *           <p>üìå {property.shortAddress}</p>
 *         </div>
 *       ))}
 *     </div>
 *   );
 * }
 */
